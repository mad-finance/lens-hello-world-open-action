/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ModuleRegistryInterface extends utils.Interface {
  functions: {
    "getModuleTypes(address)": FunctionFragment;
    "isErc20CurrencyRegistered(address)": FunctionFragment;
    "isModuleRegistered(address)": FunctionFragment;
    "isModuleRegisteredAs(address,uint256)": FunctionFragment;
    "registerErc20Currency(address)": FunctionFragment;
    "registerModule(address,uint256)": FunctionFragment;
    "verifyErc20Currency(address)": FunctionFragment;
    "verifyModule(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getModuleTypes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isErc20CurrencyRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleRegisteredAs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerErc20Currency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModule",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyErc20Currency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyModule",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getModuleTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isErc20CurrencyRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleRegisteredAs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerErc20Currency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyErc20Currency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyModule",
    data: BytesLike
  ): Result;

  events: {
    "ModuleRegistered(address,uint256,string,uint256)": EventFragment;
    "erc20CurrencyRegistered(address,string,string,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "erc20CurrencyRegistered"): EventFragment;
}

export type ModuleRegisteredEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    moduleAddress: string;
    moduleType: BigNumber;
    metadata: string;
    timestamp: BigNumber;
  }
>;

export type ModuleRegisteredEventFilter =
  TypedEventFilter<ModuleRegisteredEvent>;

export type erc20CurrencyRegisteredEvent = TypedEvent<
  [string, string, string, number, BigNumber],
  {
    erc20CurrencyAddress: string;
    name: string;
    symbol: string;
    decimals: number;
    timestamp: BigNumber;
  }
>;

export type erc20CurrencyRegisteredEventFilter =
  TypedEventFilter<erc20CurrencyRegisteredEvent>;

export interface ModuleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ModuleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getModuleTypes(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isErc20CurrencyRegistered(
      currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isModuleRegistered(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isModuleRegisteredAs(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerErc20Currency(
      currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyErc20Currency(
      currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getModuleTypes(
    moduleAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isErc20CurrencyRegistered(
    currencyAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isModuleRegistered(
    moduleAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isModuleRegisteredAs(
    moduleAddress: string,
    moduleType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerErc20Currency(
    currencyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerModule(
    moduleAddress: string,
    moduleType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyErc20Currency(
    currencyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyModule(
    moduleAddress: string,
    moduleType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getModuleTypes(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isErc20CurrencyRegistered(
      currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isModuleRegistered(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isModuleRegisteredAs(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerErc20Currency(
      currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyErc20Currency(
      currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ModuleRegistered(address,uint256,string,uint256)"(
      moduleAddress?: string | null,
      moduleType?: BigNumberish | null,
      metadata?: null,
      timestamp?: null
    ): ModuleRegisteredEventFilter;
    ModuleRegistered(
      moduleAddress?: string | null,
      moduleType?: BigNumberish | null,
      metadata?: null,
      timestamp?: null
    ): ModuleRegisteredEventFilter;

    "erc20CurrencyRegistered(address,string,string,uint8,uint256)"(
      erc20CurrencyAddress?: string | null,
      name?: null,
      symbol?: null,
      decimals?: null,
      timestamp?: null
    ): erc20CurrencyRegisteredEventFilter;
    erc20CurrencyRegistered(
      erc20CurrencyAddress?: string | null,
      name?: null,
      symbol?: null,
      decimals?: null,
      timestamp?: null
    ): erc20CurrencyRegisteredEventFilter;
  };

  estimateGas: {
    getModuleTypes(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isErc20CurrencyRegistered(
      currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isModuleRegistered(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isModuleRegisteredAs(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerErc20Currency(
      currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyErc20Currency(
      currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getModuleTypes(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isErc20CurrencyRegistered(
      currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isModuleRegistered(
      moduleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isModuleRegisteredAs(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerErc20Currency(
      currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyErc20Currency(
      currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyModule(
      moduleAddress: string,
      moduleType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
