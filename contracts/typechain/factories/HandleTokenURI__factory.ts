/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HandleTokenURI,
  HandleTokenURIInterface,
} from "../HandleTokenURI";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "localName",
        type: "string",
      },
      {
        internalType: "string",
        name: "namespace",
        type: "string",
      },
    ],
    name: "getTokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60808060405234610016576107e1908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b6000803560e01c63a11f86831461002957600080fd5b346103bd5760603660031901126103bd576001600160401b036024358181116103c45761005a90369060040161042c565b6044358281116103d45761007290369060040161042c565b91845163799d5a6760e11b8152602094856004830152808280610098602482018861049b565b038173__$7c9ebfe5a70e7779947e32a915da035c80$__5af49283156103c8578193610336575b505050916102cd6101096102d2936100d9610332966104f2565b936100e560043561066e565b906100f0835161066e565b918a519687946901ec89b985b59488e88960b61b8c8701528051906101678d82019261012081602a8b0186610478565b8801917f222c226465736372697074696f6e223a224c656e732050726f746f636f6c202d602a84015267812185b991b1948160be1b604a8401525180936053840190610478565b017f222c22696d616765223a22646174613a696d6167652f7376672b786d6c3b62616053820152641cd94d8d0b60da1b60738201526101b08c8351938491607885019101610478565b017f222c2261747472696275746573223a5b7b22646973706c61795f74797065223a60788201527f226e756d626572222c2274726169745f74797065223a224944222c2276616c7560988201526332911d1160e11b60b882015261021d825180938d60bc85019101610478565b017f227d2c7b2274726169745f74797065223a224e414d455350414345222c22766160bc82015265363ab2911d1160d11b60dc820152610266825180938c60e285019101610478565b01907f227d2c7b2274726169745f74797065223a224c454e475448222c2276616c756560e283015262111d1160e91b610102830152610105916102b1825180938c8685019101610478565b019063227d5d7d60e01b908201520360e98101845201826103d8565b6104f2565b92610323603d825180967f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008783015261031381518092898686019101610478565b810103601d8101875201856103d8565b5192828493845283019061049b565b0390f35b909192503d8083853e61034981856103d8565b83019286818503126103c45780519182116103c4570182601f820112156103c05780519161037683610411565b93610383895195866103d8565b8385528784840101116103bd57506102d2936100d9846103b36102cd95610109958b806103329c9a019101610478565b94965050936100bf565b80fd5b5080fd5b8280fd5b508651903d90823e3d90fd5b8380fd5b601f909101601f19168101906001600160401b038211908210176103fb57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116103fb57601f01601f191660200190565b81601f820112156104735780359061044382610411565b9261045160405194856103d8565b8284526020838301011161047357816000926020809301838601378301015290565b600080fd5b60005b83811061048b5750506000910152565b818101518382015260200161047b565b906020916104b481518092818552858086019101610478565b601f01601f1916010190565b906104ca82610411565b6104d760405191826103d8565b82815280926104e8601f1991610411565b0190602036910137565b80511561064a57604051606081016001600160401b038111828210176103fb57604052604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408201528151600292838201809211610634576003918290046001600160fe1b038116810361063457610597908594951b6104c0565b936020850193829183518401925b8381106105e357505050505106806001146105d0576002146105c5575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518782015301959291906105a5565b634e487b7160e01b600052601160045260246000fd5b50604051602081016001600160401b038111828210176103fb576040526000815290565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8082101561079d575b506904ee2d6d415b85acef8160201b8083101561078e575b50662386f26fc100008083101561077f575b506305f5e10080831015610770575b5061271080831015610761575b506064821015610751575b600a80921015610747575b6001908160216106ff8287016104c0565b95860101905b610711575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561074257919082610705565b61070a565b91600101916106ee565b91906064600291049101916106e3565b600491939204910191386106d8565b600891939204910191386106cb565b601091939204910191386106bc565b602091939204910191386106aa565b60409350810491503861069256fea26469706673582212201de4a074dcb6b87219809e521f0fd13c23fb3dbbaa782cf70e7c5317a6b047bf64736f6c63430008150033";

type HandleTokenURIConstructorParams =
  | [linkLibraryAddresses: HandleTokenURILibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandleTokenURIConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class HandleTokenURI__factory extends ContractFactory {
  constructor(...args: HandleTokenURIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        HandleTokenURI__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: HandleTokenURILibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$7c9ebfe5a70e7779947e32a915da035c80\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/svgs/Handle/HandleSVG.sol:HandleSVG"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HandleTokenURI> {
    return super.deploy(overrides || {}) as Promise<HandleTokenURI>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HandleTokenURI {
    return super.attach(address) as HandleTokenURI;
  }
  connect(signer: Signer): HandleTokenURI__factory {
    return super.connect(signer) as HandleTokenURI__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandleTokenURIInterface {
    return new utils.Interface(_abi) as HandleTokenURIInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandleTokenURI {
    return new Contract(address, _abi, signerOrProvider) as HandleTokenURI;
  }
}

export interface HandleTokenURILibraryAddresses {
  ["contracts/libraries/svgs/Handle/HandleSVG.sol:HandleSVG"]: string;
}
