/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Currency, CurrencyInterface } from "../Currency";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803462000338576040906001600160401b03908083018281118282101762000322578352600881526020916743757272656e637960c01b8383015283519284840184811083821117620003225785526004938481526321a7a4a760e11b828201528351908382116200030d576003928354926001968785811c9516801562000302575b83861014620002ed578190601f9586811162000297575b508390868311600114620002305760009262000224575b505060001982871b1c191690871b1784555b81519485116200020f5786548681811c9116801562000204575b82821014620001ef57838111620001a4575b50809285116001146200013657509383949184926000956200012a575b50501b92600019911b1c19161790555b516108f890816200033e8239f35b0151935038806200010c565b92919084601f1981168860005285600020956000905b898383106200018957505050106200016e575b50505050811b0190556200011c565b01519060f884600019921b161c19169055388080806200015f565b8587015189559097019694850194889350908101906200014c565b87600052816000208480880160051c820192848910620001e5575b0160051c019087905b828110620001d8575050620000ef565b60008155018790620001c8565b92508192620001bf565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000dd565b604187634e487b7160e01b6000525260246000fd5b015190503880620000b1565b90899350601f1983169188600052856000209260005b8782821062000280575050841162000267575b505050811b018455620000c3565b015160001983891b60f8161c1916905538808062000259565b8385015186558d9790950194938401930162000246565b90915086600052836000208680850160051c820192868610620002e3575b918b91869594930160051c01915b828110620002d35750506200009a565b600081558594508b9101620002c3565b92508192620002b5565b602289634e487b7160e01b6000525260246000fd5b94607f169462000083565b604186634e487b7160e01b6000525260246000fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461060a57508163095ea7b31461052357816318160ddd1461050457816323b872dd14610398578163313ce5671461037c57816340c10f19146102aa57816370a082311461026757816395d89b411461011b57508063a9059cbb146100eb5763dd62ed3e1461009357600080fd5b346100e757806003193601126100e757806020926100af610736565b6100b761075e565b73ffffffffffffffffffffffffffffffffffffffff91821683526001865283832091168252845220549051908152f35b5080fd5b50346100e757806003193601126100e75760209061011461010a610736565b6024359033610781565b5160018152f35b8383346100e757816003193601126100e757805190828454600181811c9080831692831561025d575b602093848410811461024a57838852879594939291811561020d57506001146101af575b50505003601f01601f191682019267ffffffffffffffff84118385101761019c57508291826101989252826106ee565b0390f35b80604186634e487b7160e01b6024945252fd5b8888529193925086917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106101f75750505090601f1992601f92820101918193610168565b80548885018701528794509285019281016101da565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f601f19610168565b60248960228c634e487b7160e01b835252fd5b91607f1691610144565b5050346100e75760206003193601126100e7578060209273ffffffffffffffffffffffffffffffffffffffff61029b610736565b16815280845220549051908152f35b919050346103785780600319360112610378576102c5610736565b9073ffffffffffffffffffffffffffffffffffffffff602435921692831561034a5760025490838201809211610337575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b856011602492634e487b7160e01b835252fd5b8460249251917fec442f05000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b5050346100e757816003193601126100e7576020905160128152f35b90508234610501576060600319360112610501576103b4610736565b6103bc61075e565b916044359373ffffffffffffffffffffffffffffffffffffffff8316808352600160205286832033845260205286832054917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8303610424575b602088610114898989610781565b8683106104bc57811561048d57331561045e5750825260016020908152868320338452815291869020908590039055829061011487610416565b602490848951917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b602490848951917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b87517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018790528291506060010390fd5b80fd5b5050346100e757816003193601126100e7576020906002549051908152f35b90503461037857816003193601126103785761053d610736565b6024359033156105db5773ffffffffffffffffffffffffffffffffffffffff169182156105ac57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b602490858551917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b602483868651917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b8490843461037857826003193601126103785782600354600181811c908083169283156106e4575b602093848410811461024a57838852879594939291811561020d57506001146106855750505003601f01601f191682019267ffffffffffffffff84118385101761019c57508291826101989252826106ee565b600388529193925086917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106106ce5750505090601f1992601f92820101918193610168565b80548885018701528794509285019281016106b1565b91607f1691610632565b60208082528251818301819052939260005b85811061072257505050601f19601f8460006040809697860101520116010190565b818101830151848201604001528201610700565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361075957565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361075957565b9173ffffffffffffffffffffffffffffffffffffffff80841692831561089157169283156108605760009083825281602052604082205490838210610808575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602481019190915260448101839052606490fd5b60246040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152fd5b60246040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152fdfea2646970667358221220cda3f0e54905f03c1bc238b81bb49a655eed1b49b5416791027994547d69ef0964736f6c63430008150033";

type CurrencyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurrencyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Currency__factory extends ContractFactory {
  constructor(...args: CurrencyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Currency> {
    return super.deploy(overrides || {}) as Promise<Currency>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Currency {
    return super.attach(address) as Currency;
  }
  override connect(signer: Signer): Currency__factory {
    return super.connect(signer) as Currency__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurrencyInterface {
    return new utils.Interface(_abi) as CurrencyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Currency {
    // @ts-ignore
    return new Contract(address, _abi, signerOrProvider) as Currency;
  }
}
