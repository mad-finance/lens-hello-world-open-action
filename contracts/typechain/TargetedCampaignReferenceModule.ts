/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Types {
  export type ProcessCommentParamsStruct = {
    profileId: BigNumberish;
    transactionExecutor: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referrerPubTypes: BigNumberish[];
    data: BytesLike;
  };

  export type ProcessCommentParamsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    number[],
    string
  ] & {
    profileId: BigNumber;
    transactionExecutor: string;
    pointedProfileId: BigNumber;
    pointedPubId: BigNumber;
    referrerProfileIds: BigNumber[];
    referrerPubIds: BigNumber[];
    referrerPubTypes: number[];
    data: string;
  };

  export type ProcessMirrorParamsStruct = {
    profileId: BigNumberish;
    transactionExecutor: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referrerPubTypes: BigNumberish[];
    data: BytesLike;
  };

  export type ProcessMirrorParamsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    number[],
    string
  ] & {
    profileId: BigNumber;
    transactionExecutor: string;
    pointedProfileId: BigNumber;
    pointedPubId: BigNumber;
    referrerProfileIds: BigNumber[];
    referrerPubIds: BigNumber[];
    referrerPubTypes: number[];
    data: string;
  };

  export type ProcessQuoteParamsStruct = {
    profileId: BigNumberish;
    transactionExecutor: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referrerPubTypes: BigNumberish[];
    data: BytesLike;
  };

  export type ProcessQuoteParamsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    number[],
    string
  ] & {
    profileId: BigNumber;
    transactionExecutor: string;
    pointedProfileId: BigNumber;
    pointedPubId: BigNumber;
    referrerProfileIds: BigNumber[];
    referrerPubIds: BigNumber[];
    referrerPubTypes: number[];
    data: string;
  };
}

export interface TargetedCampaignReferenceModuleInterface
  extends utils.Interface {
  functions: {
    "CLIENT_FEE_BPS_MAX()": FunctionFragment;
    "HUB()": FunctionFragment;
    "MODULE_REGISTRY()": FunctionFragment;
    "PROTOCOL_FEE_BPS_MAX()": FunctionFragment;
    "campaignRewardClaimed(uint256,uint256,uint256)": FunctionFragment;
    "clientFeeBps()": FunctionFragment;
    "clientFeesPerCurrency(address,address)": FunctionFragment;
    "getBudgetRemainingForPublication(uint256,uint256)": FunctionFragment;
    "getClientFee(uint256)": FunctionFragment;
    "getClientFeePerMirrorForPublication(uint256,uint256)": FunctionFragment;
    "getMerkleRootForPublication(uint256,uint256)": FunctionFragment;
    "getModuleMetadataURI()": FunctionFragment;
    "getProtocolFee(uint256)": FunctionFragment;
    "initializeReferenceModule(uint256,uint256,address,bytes)": FunctionFragment;
    "metadataURI()": FunctionFragment;
    "owner()": FunctionFragment;
    "processComment((uint256,address,uint256,uint256,uint256[],uint256[],uint8[],bytes))": FunctionFragment;
    "processMirror((uint256,address,uint256,uint256,uint256[],uint256[],uint8[],bytes))": FunctionFragment;
    "processQuote((uint256,address,uint256,uint256,uint256[],uint256[],uint8[],bytes))": FunctionFragment;
    "protocolFeeBps()": FunctionFragment;
    "protocolFeesPerCurrency(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setClientFeeBps(uint256)": FunctionFragment;
    "setClientWhitelist(address,bool)": FunctionFragment;
    "setModuleMetadataURI(string)": FunctionFragment;
    "setProtocolFeeBps(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateMerkleProofForPublication(uint256,uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "whitelistedClients(address)": FunctionFragment;
    "withdrawBudgetForPublication(uint256,uint256)": FunctionFragment;
    "withdrawClientFees(address)": FunctionFragment;
    "withdrawProtocolFees(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLIENT_FEE_BPS_MAX"
      | "HUB"
      | "MODULE_REGISTRY"
      | "PROTOCOL_FEE_BPS_MAX"
      | "campaignRewardClaimed"
      | "clientFeeBps"
      | "clientFeesPerCurrency"
      | "getBudgetRemainingForPublication"
      | "getClientFee"
      | "getClientFeePerMirrorForPublication"
      | "getMerkleRootForPublication"
      | "getModuleMetadataURI"
      | "getProtocolFee"
      | "initializeReferenceModule"
      | "metadataURI"
      | "owner"
      | "processComment"
      | "processMirror"
      | "processQuote"
      | "protocolFeeBps"
      | "protocolFeesPerCurrency"
      | "renounceOwnership"
      | "setClientFeeBps"
      | "setClientWhitelist"
      | "setModuleMetadataURI"
      | "setProtocolFeeBps"
      | "supportsInterface"
      | "transferOwnership"
      | "validateMerkleProofForPublication"
      | "whitelistedClients"
      | "withdrawBudgetForPublication"
      | "withdrawClientFees"
      | "withdrawProtocolFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CLIENT_FEE_BPS_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HUB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MODULE_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_BPS_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRewardClaimed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clientFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clientFeesPerCurrency",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBudgetRemainingForPublication",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientFeePerMirrorForPublication",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRootForPublication",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeReferenceModule",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processComment",
    values: [Types.ProcessCommentParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "processMirror",
    values: [Types.ProcessMirrorParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "processQuote",
    values: [Types.ProcessQuoteParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeesPerCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClientFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClientWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setModuleMetadataURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMerkleProofForPublication",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedClients",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBudgetForPublication",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawClientFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFees",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLIENT_FEE_BPS_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HUB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MODULE_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_BPS_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRewardClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clientFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clientFeesPerCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBudgetRemainingForPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientFeePerMirrorForPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRootForPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeReferenceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeesPerCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClientFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClientWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModuleMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMerkleProofForPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedClients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBudgetForPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawClientFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFees",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetClientFeeBps(uint256)": EventFragment;
    "SetClientWhitelist(address,bool)": EventFragment;
    "SetProtocolFeeBps(uint256)": EventFragment;
    "TargetedCampaignReferencePublicationClosed(uint256,uint256,uint256)": EventFragment;
    "TargetedCampaignReferencePublicationCreated(uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
    "WithdrawClientFees(address,address,uint256)": EventFragment;
    "WithdrawProtocolFees(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClientFeeBps"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClientWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeeBps"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TargetedCampaignReferencePublicationClosed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TargetedCampaignReferencePublicationCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawClientFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProtocolFees"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetClientFeeBpsEventObject {
  value: BigNumber;
}
export type SetClientFeeBpsEvent = TypedEvent<
  [BigNumber],
  SetClientFeeBpsEventObject
>;

export type SetClientFeeBpsEventFilter = TypedEventFilter<SetClientFeeBpsEvent>;

export interface SetClientWhitelistEventObject {
  client: string;
  value: boolean;
}
export type SetClientWhitelistEvent = TypedEvent<
  [string, boolean],
  SetClientWhitelistEventObject
>;

export type SetClientWhitelistEventFilter =
  TypedEventFilter<SetClientWhitelistEvent>;

export interface SetProtocolFeeBpsEventObject {
  value: BigNumber;
}
export type SetProtocolFeeBpsEvent = TypedEvent<
  [BigNumber],
  SetProtocolFeeBpsEventObject
>;

export type SetProtocolFeeBpsEventFilter =
  TypedEventFilter<SetProtocolFeeBpsEvent>;

export interface TargetedCampaignReferencePublicationClosedEventObject {
  profileId: BigNumber;
  pubId: BigNumber;
  budgetRemainingPlusFees: BigNumber;
}
export type TargetedCampaignReferencePublicationClosedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TargetedCampaignReferencePublicationClosedEventObject
>;

export type TargetedCampaignReferencePublicationClosedEventFilter =
  TypedEventFilter<TargetedCampaignReferencePublicationClosedEvent>;

export interface TargetedCampaignReferencePublicationCreatedEventObject {
  profileId: BigNumber;
  pubId: BigNumber;
  currency: string;
  budget: BigNumber;
  budgetPerMirror: BigNumber;
  clientFeePerMirror: BigNumber;
}
export type TargetedCampaignReferencePublicationCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  TargetedCampaignReferencePublicationCreatedEventObject
>;

export type TargetedCampaignReferencePublicationCreatedEventFilter =
  TypedEventFilter<TargetedCampaignReferencePublicationCreatedEvent>;

export interface WithdrawClientFeesEventObject {
  client: string;
  currency: string;
  value: BigNumber;
}
export type WithdrawClientFeesEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawClientFeesEventObject
>;

export type WithdrawClientFeesEventFilter =
  TypedEventFilter<WithdrawClientFeesEvent>;

export interface WithdrawProtocolFeesEventObject {
  currency: string;
  value: BigNumber;
}
export type WithdrawProtocolFeesEvent = TypedEvent<
  [string, BigNumber],
  WithdrawProtocolFeesEventObject
>;

export type WithdrawProtocolFeesEventFilter =
  TypedEventFilter<WithdrawProtocolFeesEvent>;

export interface TargetedCampaignReferenceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TargetedCampaignReferenceModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLIENT_FEE_BPS_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    HUB(overrides?: CallOverrides): Promise<[string]>;

    MODULE_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_FEE_BPS_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignRewardClaimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clientFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    clientFeesPerCurrency(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBudgetRemainingForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClientFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClientFeePerMirrorForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMerkleRootForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getModuleMetadataURI(overrides?: CallOverrides): Promise<[string]>;

    getProtocolFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      arg2: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    metadataURI(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    protocolFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeesPerCurrency(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setClientFeeBps(
      _clientFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setClientWhitelist(
      client: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setModuleMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFeeBps(
      _protocolFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validateMerkleProofForPublication(
      profileId: BigNumberish,
      profileIdPointed: BigNumberish,
      pubIdPointed: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistedClients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawBudgetForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawClientFees(
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawProtocolFees(
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CLIENT_FEE_BPS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  HUB(overrides?: CallOverrides): Promise<string>;

  MODULE_REGISTRY(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_FEE_BPS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  campaignRewardClaimed(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clientFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  clientFeesPerCurrency(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBudgetRemainingForPublication(
    profileId: BigNumberish,
    pubId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClientFee(
    budget: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClientFeePerMirrorForPublication(
    profileId: BigNumberish,
    pubId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMerkleRootForPublication(
    profileId: BigNumberish,
    pubId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getModuleMetadataURI(overrides?: CallOverrides): Promise<string>;

  getProtocolFee(
    budget: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializeReferenceModule(
    profileId: BigNumberish,
    pubId: BigNumberish,
    arg2: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  metadataURI(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processComment(
    processCommentParams: Types.ProcessCommentParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  processMirror(
    processMirrorParams: Types.ProcessMirrorParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  processQuote(
    processQuoteParams: Types.ProcessQuoteParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  protocolFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeesPerCurrency(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setClientFeeBps(
    _clientFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setClientWhitelist(
    client: string,
    isWhitelisted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setModuleMetadataURI(
    _metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFeeBps(
    _protocolFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validateMerkleProofForPublication(
    profileId: BigNumberish,
    profileIdPointed: BigNumberish,
    pubIdPointed: BigNumberish,
    index: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistedClients(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdrawBudgetForPublication(
    profileId: BigNumberish,
    pubId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawClientFees(
    currency: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawProtocolFees(
    currency: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CLIENT_FEE_BPS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    HUB(overrides?: CallOverrides): Promise<string>;

    MODULE_REGISTRY(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_FEE_BPS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRewardClaimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clientFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    clientFeesPerCurrency(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBudgetRemainingForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClientFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClientFeePerMirrorForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRootForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getModuleMetadataURI(overrides?: CallOverrides): Promise<string>;

    getProtocolFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      arg2: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    metadataURI(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    protocolFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeesPerCurrency(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setClientFeeBps(
      _clientFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClientWhitelist(
      client: string,
      isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setModuleMetadataURI(
      _metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeBps(
      _protocolFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateMerkleProofForPublication(
      profileId: BigNumberish,
      profileIdPointed: BigNumberish,
      pubIdPointed: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistedClients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawBudgetForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawClientFees(
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFees(
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetClientFeeBps(uint256)"(value?: null): SetClientFeeBpsEventFilter;
    SetClientFeeBps(value?: null): SetClientFeeBpsEventFilter;

    "SetClientWhitelist(address,bool)"(
      client?: null,
      value?: null
    ): SetClientWhitelistEventFilter;
    SetClientWhitelist(
      client?: null,
      value?: null
    ): SetClientWhitelistEventFilter;

    "SetProtocolFeeBps(uint256)"(value?: null): SetProtocolFeeBpsEventFilter;
    SetProtocolFeeBps(value?: null): SetProtocolFeeBpsEventFilter;

    "TargetedCampaignReferencePublicationClosed(uint256,uint256,uint256)"(
      profileId?: null,
      pubId?: null,
      budgetRemainingPlusFees?: null
    ): TargetedCampaignReferencePublicationClosedEventFilter;
    TargetedCampaignReferencePublicationClosed(
      profileId?: null,
      pubId?: null,
      budgetRemainingPlusFees?: null
    ): TargetedCampaignReferencePublicationClosedEventFilter;

    "TargetedCampaignReferencePublicationCreated(uint256,uint256,address,uint256,uint256,uint256)"(
      profileId?: null,
      pubId?: null,
      currency?: null,
      budget?: null,
      budgetPerMirror?: null,
      clientFeePerMirror?: null
    ): TargetedCampaignReferencePublicationCreatedEventFilter;
    TargetedCampaignReferencePublicationCreated(
      profileId?: null,
      pubId?: null,
      currency?: null,
      budget?: null,
      budgetPerMirror?: null,
      clientFeePerMirror?: null
    ): TargetedCampaignReferencePublicationCreatedEventFilter;

    "WithdrawClientFees(address,address,uint256)"(
      client?: null,
      currency?: null,
      value?: null
    ): WithdrawClientFeesEventFilter;
    WithdrawClientFees(
      client?: null,
      currency?: null,
      value?: null
    ): WithdrawClientFeesEventFilter;

    "WithdrawProtocolFees(address,uint256)"(
      currency?: null,
      value?: null
    ): WithdrawProtocolFeesEventFilter;
    WithdrawProtocolFees(
      currency?: null,
      value?: null
    ): WithdrawProtocolFeesEventFilter;
  };

  estimateGas: {
    CLIENT_FEE_BPS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    HUB(overrides?: CallOverrides): Promise<BigNumber>;

    MODULE_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_FEE_BPS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRewardClaimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clientFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    clientFeesPerCurrency(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBudgetRemainingForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClientFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClientFeePerMirrorForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRootForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModuleMetadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      arg2: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    metadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeesPerCurrency(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setClientFeeBps(
      _clientFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setClientWhitelist(
      client: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setModuleMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFeeBps(
      _protocolFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validateMerkleProofForPublication(
      profileId: BigNumberish,
      profileIdPointed: BigNumberish,
      pubIdPointed: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedClients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBudgetForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawClientFees(
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawProtocolFees(
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLIENT_FEE_BPS_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MODULE_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_FEE_BPS_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignRewardClaimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clientFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clientFeesPerCurrency(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBudgetRemainingForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClientFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClientFeePerMirrorForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleRootForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModuleMetadataURI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFee(
      budget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      arg2: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    metadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeesPerCurrency(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setClientFeeBps(
      _clientFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setClientWhitelist(
      client: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setModuleMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeBps(
      _protocolFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validateMerkleProofForPublication(
      profileId: BigNumberish,
      profileIdPointed: BigNumberish,
      pubIdPointed: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedClients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBudgetForPublication(
      profileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawClientFees(
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFees(
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
