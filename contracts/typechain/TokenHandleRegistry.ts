/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type HandleStruct = { id: BigNumberish; collection: string };

export type HandleStructOutput = [BigNumber, string] & {
  id: BigNumber;
  collection: string;
};

export type TokenStruct = { id: BigNumberish; collection: string };

export type TokenStructOutput = [BigNumber, string] & {
  id: BigNumber;
  collection: string;
};

export type EIP712SignatureStruct = {
  signer: string;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
  deadline: BigNumberish;
};

export type EIP712SignatureStructOutput = [
  string,
  number,
  string,
  string,
  BigNumber
] & { signer: string; v: number; r: string; s: string; deadline: BigNumber };

export interface TokenHandleRegistryInterface extends utils.Interface {
  functions: {
    "getDefaultHandle(uint256)": FunctionFragment;
    "incrementNonce(uint8)": FunctionFragment;
    "link(uint256,uint256)": FunctionFragment;
    "linkWithSig(uint256,uint256,(address,uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "migrationLink(uint256,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "resolve(uint256)": FunctionFragment;
    "unlink(uint256,uint256)": FunctionFragment;
    "unlinkWithSig(uint256,uint256,(address,uint8,bytes32,bytes32,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDefaultHandle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "link",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWithSig",
    values: [BigNumberish, BigNumberish, EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationLink",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlink",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkWithSig",
    values: [BigNumberish, BigNumberish, EIP712SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDefaultHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlinkWithSig",
    data: BytesLike
  ): Result;

  events: {
    "HandleLinked(tuple,tuple,address,uint256)": EventFragment;
    "HandleUnlinked(tuple,tuple,address,uint256)": EventFragment;
    "NonceUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HandleLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandleUnlinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceUpdated"): EventFragment;
}

export type HandleLinkedEvent = TypedEvent<
  [HandleStructOutput, TokenStructOutput, string, BigNumber],
  {
    handle: HandleStructOutput;
    token: TokenStructOutput;
    transactionExecutor: string;
    timestamp: BigNumber;
  }
>;

export type HandleLinkedEventFilter = TypedEventFilter<HandleLinkedEvent>;

export type HandleUnlinkedEvent = TypedEvent<
  [HandleStructOutput, TokenStructOutput, string, BigNumber],
  {
    handle: HandleStructOutput;
    token: TokenStructOutput;
    transactionExecutor: string;
    timestamp: BigNumber;
  }
>;

export type HandleUnlinkedEventFilter = TypedEventFilter<HandleUnlinkedEvent>;

export type NonceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { signer: string; nonce: BigNumber; timestamp: BigNumber }
>;

export type NonceUpdatedEventFilter = TypedEventFilter<NonceUpdatedEvent>;

export interface TokenHandleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenHandleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDefaultHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incrementNonce(
      increment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    link(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrationLink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(
      signer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    resolve(
      handleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getDefaultHandle(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incrementNonce(
    increment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  link(
    handleId: BigNumberish,
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkWithSig(
    handleId: BigNumberish,
    profileId: BigNumberish,
    signature: EIP712SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrationLink(
    handleId: BigNumberish,
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(signer: string, overrides?: CallOverrides): Promise<BigNumber>;

  resolve(
    handleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlink(
    handleId: BigNumberish,
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkWithSig(
    handleId: BigNumberish,
    profileId: BigNumberish,
    signature: EIP712SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDefaultHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementNonce(
      increment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    link(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    linkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    migrationLink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(signer: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolve(
      handleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HandleLinked(tuple,tuple,address,uint256)"(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleLinkedEventFilter;
    HandleLinked(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleLinkedEventFilter;

    "HandleUnlinked(tuple,tuple,address,uint256)"(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleUnlinkedEventFilter;
    HandleUnlinked(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleUnlinkedEventFilter;

    "NonceUpdated(address,uint256,uint256)"(
      signer?: string | null,
      nonce?: null,
      timestamp?: null
    ): NonceUpdatedEventFilter;
    NonceUpdated(
      signer?: string | null,
      nonce?: null,
      timestamp?: null
    ): NonceUpdatedEventFilter;
  };

  estimateGas: {
    getDefaultHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementNonce(
      increment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    link(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrationLink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(signer: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolve(
      handleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDefaultHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementNonce(
      increment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    link(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrationLink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      handleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlink(
      handleId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkWithSig(
      handleId: BigNumberish,
      profileId: BigNumberish,
      signature: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
